<div class="center jumbotron">
	<h3>Energy Storage Stats</h3>

	<h2>
		Energy Storage Stats is a resource in alpha-release to expand information like this: <a href="http://en.wikipedia.org/wiki/Ragone_chart">Ragone chart</a>.
	</h2>

</div>



<div class="scatter"></div>

<% content_for :javascript do %>

<script type='text/javascript'>

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scale.log()
    .range([0, width]);

var y = d3.scale.log()
    .range([height, 0]);

var color = d3.scale.category10();

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var tooltip = d3.select(".scatter").append("div") 
    .attr("class", "tooltip")       
    .style("opacity", 0);

var svg = d3.select("div.scatter").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.tsv("assets/sampleESSdata.tsv", function(error, data) {
  data.forEach(function(d) {
    d.energyDensity = +d.energyDensity;
    d.powerDensity = +d.powerDensity;
  });

  x.domain(d3.extent(data, function(d) { return d.powerDensity; })).nice();
  y.domain(d3.extent(data, function(d) { return d.energyDensity; })).nice();

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text("Energy Density (Wh/kg) [values are arbitrary]");

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Power Density (W/kg) [values are arbitrary]");

  svg.selectAll(".dot")
      .data(data)
    .enter().append("circle")
      .attr("class", "dot")
      .attr("r", 3.5)
      .attr("cx", function(d) { return x(d.powerDensity); })
      .attr("cy", function(d) { return y(d.energyDensity); })
      .style("fill", function(d) { return color(d.device); })
      .on("mouseover", function(d) {    
          tooltip.transition()    
                .duration(200)    
                .style("opacity", .9);    
          tooltip.html(d.device + "<br/>"  + d.device)  
                .style("left", (d3.event.pageX + 2) + "px")   
                .style("top", (d3.event.pageY - 30) + "px");
        })          
      .on("mouseout", function(d) {   
            tooltip.transition()    
                .duration(500)    
                .style("opacity", 0); 
        })
    .append("svg:title")
      .text(function(d, i) { return d.device; });

  var legend = svg.selectAll(".legend")
      .data(color.domain())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d; });

});

</script>

<% end %>












